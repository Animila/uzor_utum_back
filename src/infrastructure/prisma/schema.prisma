generator client {
	provider = "prisma-client-js"
	output   = "../../../node_modules/.prisma/client"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model users {
	id          String    @id
	phone       String    @unique
	email       String    @unique
	first_name  String
	last_name   String
	accepted_at Boolean   @default(false)
	activated_at Boolean @default(false)
	created_at  DateTime  @default(now())
	last_online_at DateTime @default(now())
	updated_at  DateTime? @default(now())
	role        Roles     @default(user)
	tokens      tokens[]
	likes 			likes[]
	bonuses			bonuses[]
	carts				carts?
	orders			orders[]
	certificates certificates[]
}

model tokens {
	id           String   @id
	token        String   @unique
	activated_at Boolean  @default(false)
	created_at   DateTime @default(now())
	user_id      String
	user         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model categories {
	id       		String     		@id
	title    		String 				@unique
	products 		products[]
}

model materials {
	id       String      @id
	title    String      @unique
	products products[]
}

model sizes {
	id       String      @id
	title    String      @unique
	cart_items cart_items[]
}

model probs {
	id       String      @id
	title    String      @unique
	cart_items cart_items[]
}

model decorations {
	id       String      @id
	title    String      @unique
	cart_items cart_items[]
}

model products {
	id          String     		@id
	title       String
	article     String     		@unique
	price       Int
	description String
	details     String
	delivery    String
	sex					Sex				 		@default(all)
	available   Int        		@default(0)
	created_at 	DateTime 	 		@default(now())
	updated_at  DateTime	 		@default(now())

	category_id String
	category    categories 		@relation(fields: [category_id], references: [id])
	material_id String
	material    materials  		@relation(fields: [material_id], references: [id])

	discounts 	discounts[]
	cart_items	cart_items[]

	prob_ids       String[]
	size_ids       String[]
	decoration_ids String[]
	reviews reviews[]
}

enum Roles {
	user
	moderator
	admin
}

enum Sex {
	male
	female
	all
}

model discounts {
	id 					String 				@id
	percentage 	Float
	start_date 	DateTime
	end_date 		DateTime
	activated 	Boolean 			@default(false)
	product_id 	String
	product 		products 			@relation(references: [id], fields: [product_id], onDelete: Cascade)
}

model journals {
	id 					String 				@id
	title 			String 				@unique
	news 				news[]
}

model news {
	id 						String 			@id
	title 				String
	about 				String
	text 					String
	views 				Int
	created_at 		DateTime 		@default(now())
	journal_id 		String
	journal 			journals 		@relation(fields: [journal_id], references: [id], onDelete: Cascade)
}

model likes {
	id 						String 			@id
	entity_type 	String
	entity_id 		String
	user_id 			String
	type 					LikeType  	@default(like)
	user 					users 			@relation(fields: [user_id], references: [id], onDelete: Cascade)
	created_at 		DateTime  	@default(now())
}


model promocodes {
	id 						String 			@id
	code 					String 			@unique
	description 	String
	discount 			Float
	valid_from 		DateTime
	valid_to 			DateTime
	active 				Boolean 		@default(true)
	orders orders[]
}

enum LikeType {
	like
	unlike
}

model bonuses {
	id 						String 			@id
	type					BonusesType
	description		String
	count					Int
	created_at		DateTime 		@default(now())
	user_id				String
	user					users				@relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum BonusesType {
	minus
	plus
}

model carts {
	id 						String 			@id
	user_id				String?			@unique
	total_amount	Float				@default(0)
	updated_at		DateTime		@default(now())
	created_at		DateTime		@default(now())

	user					users?			@relation(fields: [user_id], references: [id], onDelete: Cascade)
	token					String			@unique

	cart_items		cart_items[]
}

model cart_items {
	id						String 			@id
	size_id				String?
	size					sizes?   @relation(fields: [size_id], references: [id], onDelete: NoAction)
	decorate_id		String?
	decorate			decorations? @relation(fields: [decorate_id], references: [id], onDelete: NoAction)
	proba_id			String?
	proba					probs?  @relation(fields: [proba_id], references: [id], onDelete: NoAction)
	count					Int					@default(1)
	updated_at		DateTime		@default(now())
	created_at		DateTime		@default(now())

	cart_id				String
	cart					carts				@relation(fields: [cart_id], references: [id], onDelete: Cascade)

	product_id		String
	product				products		@relation(fields: [product_id], references: [id])
}

model certificate_types {
	id String @id
	value Int
	description String
	certificates certificates[]
}

model certificates {
	id String @id

	phone String?
	email String?
	accepted Boolean @default(true)
	delivery_at DateTime @default(now())

	code String @unique
	activated Boolean @default(false)

	user_id String?
	user users? @relation(fields: [user_id], references: [id], onDelete: Cascade)

	certificate_type_id String
	certificate_type certificate_types @relation(fields: [certificate_type_id], references: [id], onDelete: Cascade)

	order_id String?

	orders orders[]
}

model orders {
	id String @id

	first_name String
	last_name String
	email String
	phone String

	send_type_id String
	send_type send_types @relation(fields: [send_type_id], references: [id], onDelete: NoAction)
	address String?
	house String?
	apartament String?
	postal_code Int?
	cabinet			String?
	delivery_at DateTime?
	shop_id			String?
	shop shops? @relation(fields: [shop_id], references: [id], onDelete: NoAction)
	comment			String?
	receiver_id String
	receiver receivers @relation(fields: [receiver_id], references: [id], onDelete: NoAction)

	payment_id String?

	items Json @db.JsonB
	certificate_id String?
	certificate certificates? @relation(fields: [certificate_id], references: [id], onDelete: NoAction)
	promocode_id String?
	promocode promocodes? @relation(fields: [promocode_id], references: [id], onDelete: NoAction)
	add_bonuses Int
	use_bonus Int
	total_amount Float

	user_id String?
	user users? @relation(fields: [user_id], references: [id], onDelete: Cascade)
	status StatusPayment
	token String
	created_at DateTime @default(now())
	updated_at DateTime @default(now())
	reviews reviews[]
}

enum StatusPayment {
	PENDING
	CANCELLED
	PAIDING
	BUILDING
	SENDING
	AWAITING
	SUCCESSED
}

model send_types {
	id String @id
	title String
	price Int
	description String
	orders orders[]
}

model receivers {
	id String @id
	token String
	full_name String
	phone String
	orders orders[]
}

model shops {
	id String @id
	title String
	address String
	longitude String // долгота
	latitude String //широта
	email String
	time Json @db.JsonB
	phone String[]
	orders orders[]
}

model files {
	id 					String 			@id
	name        String
	path        String
	entity_type String
	entity_id   String
	typefile    String
	position		Int 				@default(1)
}

model reviews {
	id            String    @id @default(cuid())
	url						String		@unique
	name					String
	text					String
	rating        Int
	created_at    DateTime  @default(now())
	published_at  DateTime?

	order_id       String
	order          orders     @relation(fields: [order_id], references: [id], onDelete: Cascade)

	product_id    String
	product       products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}
